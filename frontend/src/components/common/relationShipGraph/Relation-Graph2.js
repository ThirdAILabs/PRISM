import React, { useRef, useEffect } from 'react';
import RelationGraph from 'relation-graph-react';
import './show-more-nodes.scss';


// useEffect(() => {
//     const unsubscribe = onFlagsUpdate((flags) => {
//       // Use flags here
//       console.log('Flags updated:', flags);
//     });
    
//     return () => unsubscribe();
//   }, []);

// Sample data generated by gpt on my structured-format.
// const sampleData = {
//     name: "M Katherine Banks",
//     connections: [
//         {
//             title: "Academic Leadership",
//             additional_info: ["President", "2021-2023"],
//             connections: [
//                 {
//                     title: "College of Engineering",
//                     additional_info: ["Dean", "2012-2021"],
//                     connections: [
//                         { title: "Mechanical Engineering Dept", additional_info: [], connections: [] },
//                         { title: "Electrical Engineering Dept", additional_info: [], connections: [] },
//                         { title: "Chemical Engineering Dept", additional_info: [], connections: [] },
//                         { title: "Civil Engineering Dept", additional_info: [], connections: [] },
//                         { title: "Aerospace Engineering Dept", additional_info: [], connections: [] }
//                     ]
//                 },
//                 {
//                     title: "Research Initiatives",
//                     additional_info: [],
//                     connections: [
//                         { title: "Engineering Research Center", additional_info: [], connections: [] },
//                         { title: "Innovation Hub", additional_info: [], connections: [] },
//                         { title: "Industry Partnerships", additional_info: [], connections: [] },
//                         { title: "Graduate Research Programs", additional_info: [], connections: [] }
//                     ]
//                 }
//             ]
//         },
//         {
//             title: "Professional Affiliations",
//             additional_info: [],
//             connections: [
//                 { title: "National Academy of Engineering", additional_info: ["Member"], connections: [] },
//                 { title: "American Society of Civil Engineers", additional_info: ["Fellow"], connections: [] },
//                 { title: "Engineering Deans Council", additional_info: ["Chair"], connections: [] },
//                 { title: "National Science Foundation", additional_info: ["Advisory Board"], connections: [] }
//             ]
//         },
//         {
//             title: "Research Publications",
//             additional_info: [],
//             connections: [
//                 { title: "Engineering Education", additional_info: ["25+ Publications"], connections: [] },
//                 { title: "Infrastructure Systems", additional_info: ["40+ Publications"], connections: [] },
//                 { title: "Sustainability Research", additional_info: ["30+ Publications"], connections: [] },
//                 { title: "Innovation & Technology", additional_info: ["20+ Publications"], connections: [] }
//             ]
//         }
//     ]
// };

// const sampleData = {
//     name: "M. Katherine Banks",
//     "risk_score": 12,
//     connections: [
//         {
//             title: "Papers with foreign talent programs",
//             count: 0,
//             connections: []
//         },
//         {
//             title: "Papers with denied entities",
//             count: 0,
//             connections: []
//         },
//         {
//             title: "Papers with high-risk funding sources",
//             count: 0,
//             connections: []
//         },
//         {
//             title: "Papers with high-risk foreign institutions",
//             count: 10,
//             connections: [
//                 {
//                     "title": "Polyoxometalate-coupled MXene nanohybrid<i>via</i>poly(ionic liquid) linkers and its electrode for enhanced supercapacitive performance",
//                     "url": "https://doi.org/10.1039/c8nr05760e",
//                     "connections": []
//                 },
//                 {
//                     "title": "Ricocheting Droplets Moving on Super‐Repellent Surfaces",
//                     "url": "https://doi.org/10.1002/advs.201901846",
//                     "connections": []
//                 },
//                 {
//                     "title": "Polyoxometalate-coupled graphene nanohybrid via gemini surfactants and its electrocatalytic property for nitrite",
//                     "url": "https://doi.org/10.1016/j.apsusc.2018.09.246",
//                     "connections": []
//                 },
//                 {
//                     "title": "Synthesis of a novel graphene-based gold nanocomposite using PVEIM-<i>b</i>-PNIPAM as a stabilizer and its thermosensitivity for the catalytic reduction of 4-nitrophenol",
//                     "url": "https://doi.org/10.1039/c8qi01303a",
//                     "connections": []
//                 },
//                 {
//                     "title": "Localization Techniques for In-pipe Robots in Water Distribution Systems",
//                     "url": "https://doi.org/10.1109/iccma51325.2020.9301560",
//                     "connections": []
//                 },
//                 {
//                     "title": "Synthesis of thermo-sensitive PDDA-co-PNIPAM/graphene hybrid via electrostatic interactions and its thermal modulated phase transition",
//                     "url": "https://doi.org/10.1016/j.matchemphys.2018.08.070",
//                     "connections": []
//                 },
//                 {
//                     "title": "Recycling the Catalyst of Atom Transfer Radical Polymerization to Prepare a Cu, N Codoped Mesoporous Carbon Electrocatalyst for Oxygen Reduction",
//                     "url": "https://doi.org/10.1021/acssuschemeng.0c00244",
//                     "connections": []
//                 },
//                 {
//                     "title": "Coumarin-surfactant modified polyoxometalate as highly efficient catalysts for the selective oxidation of benzyl alcohol with air",
//                     "url": "https://doi.org/10.1016/j.catcom.2018.05.006",
//                     "connections": []
//                 },
//                 {
//                     "title": "Correction: Polyoxometalate-coupled MXene nanohybrid <i>via</i> poly(ionic liquid) linkers and its electrode for enhanced supercapacitive performance",
//                     "url": "https://doi.org/10.1039/c8nr90228c",
//                     "connections": []
//                 },
//                 {
//                     "title": "Coumarin-surfactant modified polyoxometalate catalyzed cross dehydrogenative coupling of benzyl alcohol with the <i>para</i>-C–H of unprotected aniline",
//                     "url": "https://doi.org/10.1039/c8cy01423j",
//                     "connections": []
//                 }
//             ]
//         },
//         {
//             "title": "High-risk appointments at foreign institutions",
//             "count": 0,
//             "connections": []
//         },
//         {
//             "title": "Potential high-risk appointments at foreign institutions",
//             "count": 0,
//             "connections": []
//         },
//         {
//             "title": "Miscellaneous potential high-risk associations",
//             "count": 2,
//             "connections": [
//                 {
//                     "title": "Peabody Energy Generation",
//                     "url": "https://www.peabodyenergy.com/Investor-Info/Corporate-Governance/Board-of-Directors",
//                     "connections": [
//                         {
//                             "title": "Former West Virginia University professor pleads guilty to wire fraud and tax fraud",
//                             "url": "https://www.justice.gov/usao-ndwv/pr/former-west-virginia-university-professor-pleads-guilty-wire-fraud-and-tax-fraud"
//                         }
//                     ]
//                 },
//                 {
//                     "title": "Peabody Energy Generation",
//                     "url": "https://www.peabodyenergy.com/Investor-Info/Corporate-Governance/Board-of-Directors",
//                     "connections": [
//                         {
//                             "title": "Former West Virginia University professor sentenced for wire fraud and tax fraud",
//                             "url": "https://www.justice.gov/usao-ndwv/pr/former-west-virginia-university-professor-sentenced-wire-fraud-and-tax-fraud",
//                             "connections": [
//                                 {
//                                     "title": "Former West Virginia University professor sentenced for wire fraud and tax fraud",
//                                     "url": "https://www.justice.gov/usao-ndwv/pr/former-west-virginia-university-professor-sentenced-wire-fraud-and-tax-fraud",
//                                     "connections": []
//                                 }
//                             ]
//                         }
//                     ]
//                 }
//             ]
//         }
//     ]
// }
const sampleData = {
    name: "M. Katherine Banks",
    riskscore: 12,
    connections: [
        {
            title: "Papers with foreign talent programs",
            count: 0,
            connections: []
        },
        {
            title: "Papers with denied entities",
            count: 0,
            connections: []
        },
        {
            title: "Papers with high-risk funding sources",
            count: 0,
            connections: []
        },
        {
            title: "Papers with high-risk foreign institutions",
            count: 10,
            connections: [
                {
                    title: "Polyoxometalate-coupled MXene nanohybrid<i>via</i>poly(ionic liquid) linkers and its electrode for enhanced supercapacitive performance",
                    url: "https://doi.org/10.1039/c8nr05760e",
                    connections: []
                },
                // ... (other paper entries with same structure)
            ]
        },
        {
            title: "High-risk appointments at foreign institutions",
            count: 0,
            connections: []
        },
        {
            title: "Potential high-risk appointments at foreign institutions",
            count: 0,
            connections: []
        },
        {
            title: "Miscellaneous potential high-risk associations",
            count: 2,
            connections: [
                {
                    title: "Peabody Energy Generation",
                    url: "https://www.peabodyenergy.com/Investor-Info/Corporate-Governance/Board-of-Directors",
                    connections: [
                        {
                            title: "Former West Virginia University professor pleads guilty to wire fraud and tax fraud",
                            url: "https://www.justice.gov/usao-ndwv/pr/former-west-virginia-university-professor-pleads-guilty-wire-fraud-and-tax-fraud"
                        }
                    ]
                },
                {
                    title: "Peabody Energy Generation2",
                    url: "https://www.peabodyenergy.com/Investor-Info/Corporate-Governance/Board-of-Directors",
                    connections: [
                        {
                            title: "Former West Virginia University professor pleads guilty to wire fraud and tax fraud2",
                            url: "https://www.justice.gov/usao-ndwv/pr/former-west-virginia-university-professor-pleads-guilty-wire-fraud-and-tax-fraud"
                        }
                    ]
                },
            ]
        }
    ]
};
const getNodes = (sampleData) => {
    const nodes = [], lines = [], rootId = 'root';
    if (!sampleData?.name)
        return nodes;
    nodes.push({ id: rootId, text: sampleData.name, offset_x: 0, data: { type: 'root' } })
    if (!sampleData?.connections)
        return nodes;

    for (let index = 0; index < sampleData.connections.length; index++) {
        const element = sampleData.connections[index];
        if ((index % 2) === 0) {
            const nodeId = rootId + "node" + index.toString();
            const nodeText = element.title.slice(0, 20);
            nodes.push({ id: nodeId, text: nodeText, offset_x: 80, data: { type: 'level1' } },)
            lines.push({ from: rootId, to: nodeId, lineShape: 3 })
            if (element?.connections && element?.connections?.length) {
                for (let childIndex = 0; childIndex < element.connections.length; childIndex++) {
                    const child = element.connections[childIndex];
                    const childNodeId = nodeId + "child" + childIndex.toString();
                    const childText = child.title.slice(0, 20);
                    nodes.push({ id: childNodeId, text: childText, expanded: false, alignItems: 'left' });
                    lines.push({ from: nodeId, to: childNodeId });
                }
            }
        }
        else {
            const nodeId = rootId + "node" + index.toString();
            const nodeText = element.title.slice(0, 20);
            nodes.push({ id: nodeId, text: nodeText, offset_x: -80, data: { type: 'level1' } },)
            lines.push({ from: nodeId, to: rootId, lineShape: 3 })
            if (element?.connections && element?.connections?.length) {
                for (let childIndex = 0; childIndex < element.connections.length; childIndex++) {
                    const child = element.connections[childIndex];
                    const childNodeId = nodeId + "child" + childIndex.toString();
                    const childText = child.title.slice(0, 20);
                    nodes.push({ id: childNodeId, text: childText, expanded: false, alignItems: 'right' });
                    lines.push({ from: childNodeId, to: nodeId });
                }
            }
        }
    }
    return { nodes, lines, rootId };
}
const ShowMoreNodesFront = () => {
    const graphRef = useRef(null);


    const graphOptions = {
        canvasBackground: '#000000',
        debug: false,
        lineUseTextPath: true,
        useAnimationWhenExpanded: true,
        layout: {
            layoutName: 'tree',
            from: 'left',
            min_per_width: '400',
            max_per_width: '400',
            min_per_height: '40',
            max_per_height: '50',
            enableGatherNodes: false,
            enableAutoLayout: true,
            levelDistance: '200,300,200,300,200,300,200,300,200,300,200,300,200,300,200,300'
        },
        defaultNodeShape: 1,
        defaultLineShape: 4,
        defaultNodeWidth: 'auto',
        defaultNodeHeight: 'auto',
        defaultJunctionPoint: 'lr',
        defaultNodeBorderWidth: 0,
        defaultLineColor: '#dddddd',
        defaultNodeColor: 'transparent'
    };
    const { nodes, lines, rootId } = getNodes(sampleData);
    const __graph_json_data = {
        rootId: rootId,
        nodes: nodes,
        lines: lines
    };
    const showGraph = async () => {


        const graphInstance = graphRef.current.getInstance();
        await graphInstance.setJsonData(__graph_json_data, true);
        await graphInstance.playShowEffect();
        // await hideMoreNodes();
    };

    const onNodeClick = (nodeObject, $event) => {
        console.log('onNodeClick:', nodeObject);
    };

    const hideMoreNodes = async () => {
        const graphInstance = graphRef.current.getInstance();
        const allNodeData = graphInstance.getNodes();
        let newLines = [];
        let newNodes = [];
        const pageSize = 3;
        console.log("AllNodes: ", allNodeData);
        allNodeData.forEach(node => {

            if (!node.lot || !node.lot.childs) {
                return;
            }

            let childNodes = node.targetTo;
            if (childNodes.length > pageSize) {
                const sliceToNode = childNodes.slice(2);
                sliceToNode.forEach(item => {
                    item.isHide = true;
                });
                newNodes.push({ id: `${node.id}-to-more`, text: `Show More T(${childNodes.length - pageSize})`, alignItems: 'left', data: { type: 'btn-more-to' } });
                newLines.push({ from: node.id, to: `${node.id}-to-more` });
            }

            childNodes = node.targetFrom;
            if (childNodes.length > 2) {
                const sliceToNode = childNodes.slice(2);
                sliceToNode.forEach(item => {
                    item.isHide = true;
                });
                newNodes.push({ id: `${node.id}-from-more`, text: `Show More F(${childNodes.length - pageSize})`, alignItems: 'right', data: { type: 'btn-more-from' } });
                newLines.push({ from: `${node.id}-from-more`, to: node.id });
            }
        });

        graphInstance.addNodes(newNodes);
        graphInstance.addLines(newLines);
        await graphInstance.doLayout();
        await graphInstance.setZoom(80);
    };

    const showMoreNodes = (nodeObject) => {
        const graphInstance = graphRef.current.getInstance();

        if (nodeObject.data.type === 'btn-more-to') {
            const allSublingNodes = nodeObject.lot.parent.targetTo;
            const pageSize = 3;
            let displayedCount = 0;
            let newDisplayedCount = 0;

            for (const node of allSublingNodes) {
                if (node.isHide === true) {
                    node.isHide = false;
                    newDisplayedCount++;
                }
                if (node.isHide !== true) {
                    displayedCount++;
                }
                if (newDisplayedCount >= pageSize) {
                    break;
                }
            }

            if (displayedCount >= allSublingNodes.length) {
                graphInstance.removeNodeById(nodeObject.id);
            }

            const moreButton = graphInstance.getNodeById(nodeObject.id);
            moreButton.text = `Show More (${allSublingNodes.length - displayedCount - 1})`;

            graphInstance.doLayout();
        }

        if (nodeObject.data.type === 'btn-more-from') {
            const allSublingNodes = nodeObject.lot.parent.targetFrom;
            const pageSize = 3;
            let displayedCount = 0;
            let newDisplayedCount = 0;

            for (const node of allSublingNodes) {
                if (node.isHide === true) {
                    node.isHide = false;
                    newDisplayedCount++;
                }
                if (node.isHide !== true) {
                    displayedCount++;
                }
                if (newDisplayedCount >= pageSize) {
                    break;
                }
            }

            const moreButton = graphInstance.getNodeById(nodeObject.id);
            moreButton.text = `Show More (${allSublingNodes.length - displayedCount - 1})`;

            if (displayedCount >= allSublingNodes.length) {
                graphInstance.removeNodeById(nodeObject.id);
            }

            graphInstance.doLayout();
        }
    };

    const onLineClick = (lineObject, linkObject, $event) => {
        console.log('onLineClick:', lineObject);
    };

    useEffect(() => {
        console.log("check2", __graph_json_data);
        showGraph();
    }, []);

    const MyNodeSlot = ({ node }) => {
        return (
            <div>
                {node.data?.type === 'btn-more-from' || node.data?.type === 'btn-more-to' ? (
                    <div className="my-node more-btn" onClick={() => showMoreNodes(node)}>
                        {node.text}
                    </div>
                ) : node.data?.type === 'root' ? (
                    <div className="my-node my-root">
                        {node.text}
                    </div>
                ) : node.data?.type === 'level1' ? (
                    <div className="my-node" style={{ paddingLeft: '5px', textAlign: 'center', backgroundColor: '#2c3e50', color: '#ffffff' }}>
                        {node.text}
                    </div>
                ) : (
                    <div className="my-node">
                        <span className="c-circle-flag" />{node.text}
                    </div>
                )}
            </div>
        );
    };

    return (
        <div className='relation-graph'>
            <div style={{
                height: '100vh', width: "90%", marginLeft: "5%", overflow: 'hidden',        // Prevents scrollbar whitespace
                position: 'relative',
                zIndex: 1
            }}>
                <RelationGraph
                    ref={graphRef}
                    options={graphOptions}
                    onNodeClick={onNodeClick}
                    onLineClick={onLineClick}
                    nodeSlot={MyNodeSlot}
                >
                </RelationGraph>

            </div>
        </div >
    );
};

export default ShowMoreNodesFront;